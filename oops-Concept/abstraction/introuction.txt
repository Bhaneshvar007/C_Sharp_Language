Abstract Classes and Methods
Data abstraction is the process of hiding certain details and showing only essential information to the user.
Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).

The abstract keyword is used for classes and methods:

Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).

Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the derived class (inherited from).


abstract class Animal 
{
  public abstract void animalSound();
  public void sleep() 
  {
    Console.WriteLine("Zzz");
  }
}


////////////////////////////////////////////////////


using System;

namespace MyApplication
{
  // Abstract class
  abstract class Animal
  {
    // Abstract method (does not have a body)
    public abstract void animalSound();
    // Regular method
    public void sleep()
    {
      Console.WriteLine("Zzz");
    }
  }
  
  // Derived class (inherit from Animal)
  class Pig : Animal
  {
    public override void animalSound()
    {
      // The body of animalSound() is provided here
      Console.WriteLine("The pig says: wee wee");
    }
  }

  class Program
  {
    static void Main(string[] args)
    {
      Pig myPig = new Pig();  // Create a Pig object
      myPig.animalSound();
      myPig.sleep();
    }
  }
}















**Abstraction** ek object-oriented programming concept hai jisme hum unnecessary details ko hide karte hain aur sirf essential functionality ko show karte hain. Iska purpose complex systems ko simple banana aur user ko ek clean interface dena hai, jisme sirf woh cheezein dikhayi jati hain jo usko necessary hain.

### **Key Points:**
1. **Hiding Complexity**: Abstraction mein hum complex implementation details ko hide karte hain aur user ko sirf required information provide karte hain.
2. **Focus on Functionality**: User ko sirf woh functionality dikhayi jati hai jo use karni hoti hai, baki implementation ko hide kar diya jata hai.

### **Types of Abstraction**:
1. **Abstract Classes**: A class that contains abstract methods (methods without implementation). Derived classes need to implement these methods.
2. **Interfaces**: An interface defines a contract that the implementing class must follow. It contains only method signatures, no implementation.

### **Abstraction in C#**:

#### 1. **Abstract Classes**:
Abstract class ek class hota hai jo kisi class ko inherit karne ke liye use hota hai, lekin usmein kuch methods ko `abstract` declare kiya jata hai, jo derived class mein implement karne padte hain.

#### **Example** (Abstract Class):

```csharp
// Abstract Class
public abstract class Vehicle
{
    public abstract void Start(); // Abstract method without body

    public void Stop() // Normal method with body
    {
        Console.WriteLine("Vehicle stopped");
    }
}

// Derived Class
public class Car : Vehicle
{
    public override void Start()
    {
        Console.WriteLine("Car started");
    }
}
```

#### **Explanation**:
- **`Vehicle`** is an abstract class with an abstract method `Start()` and a regular method `Stop()`.
- **`Car`** is a derived class that implements the `Start()` method.

#### 2. **Interfaces**:
Interface mein bas method signatures hote hain, unka implementation classes mein hota hai jo us interface ko implement karti hain.

#### **Example** (Interface):

```csharp
// Interface
public interface IVehicle
{
    void Start(); // Method signature
    void Stop();
}

// Implementing Class
public class Car : IVehicle
{
    public void Start()
    {
        Console.WriteLine("Car started");
    }

    public void Stop()
    {
        Console.WriteLine("Car stopped");
    }
}
```

#### **Explanation**:
- **`IVehicle`** is an interface with method signatures `Start()` and `Stop()`.
- **`Car`** implements this interface by providing the body for these methods.

---

### **Summary of Abstraction**:
- **Abstract Classes**: Can have both abstract (without implementation) and non-abstract (with implementation) methods.
- **Interfaces**: Can only have method signatures and must be implemented fully by the classes that inherit them.

Abstraction helps to create flexible and reusable code by focusing on **what** a class does, instead of **how** it does it.

Let me know if you'd like a deeper dive into any of the concepts! 